# This image is used both for the workers and the web server containers; this
# is not a great practice.  In a production environment you probably would want
# a much slimmer web server that only had the "server" binary and the static
# files and templates.  The worker system would need a bit more, like the
# openjpeg tools, poppler, etc., but still wouldn't need the whole Go stack or
# a Maria DB client.
FROM fedora:33
MAINTAINER Jeremy Echols <jechols@uoregon.edu>

RUN dnf update -y

# Get poppler compilation done early - this is the painful part
RUN dnf install -y make automake gcc-c++
RUN dnf install -y poppler-utils poppler-devel fontconfig-devel libjpeg-devel

# Grab and patch poppler-utils: 0.22.5 (this is a known-good release for our patch)
WORKDIR /usr/local/
RUN curl -s "https://poppler.freedesktop.org/poppler-0.22.5.tar.gz" | tar -xz
RUN curl -s "https://raw.githubusercontent.com/uoregon-libraries/pdftotext/main/pdftotext.cc" \
         > /usr/local/poppler-0.22.5/utils/pdftotext.cc

# Compile
WORKDIR /usr/local/poppler-0.22.5
RUN ./configure
RUN make

# Link the patched pdftotext binary
RUN ln /usr/local/poppler-0.22.5/utils/pdftotext /usr/local/bin/

# Oh, right, and openjpeg2 is painful as well because it has to be installed
# *from source* in order to recognize libpng
WORKDIR /usr/local/
RUN curl -sL "https://github.com/uclouvain/openjpeg/archive/v2.3.1.tar.gz" | tar -xz
RUN dnf install -y libtiff-devel libpng-devel cmake
RUN mkdir /usr/local/openjpeg-2.3.1/build
WORKDIR /usr/local/openjpeg-2.3.1/build
RUN cmake ..
RUN make
RUN make install
RUN make clean

# Less expensive system dependencies
RUN dnf install -y findutils
RUN dnf install -y GraphicsMagick ghostscript
RUN dnf install -y tar
RUN dnf install -y git
RUN dnf install -y mariadb

# Install Go
RUN curl https://dl.google.com/go/go1.18.2.linux-amd64.tar.gz >/tmp/go.tgz
RUN cd /opt && tar -xzf /tmp/go.tgz

# Go ENV setup
ENV GOROOT /opt/go
ENV GOPATH /go
ENV PATH $PATH:$GOROOT/bin:$GOPATH/bin

# Golang dependencies
RUN go install github.com/pressly/goose/v3/cmd/goose@latest
RUN go install golang.org/x/lint/golint@latest
RUN go install golang.org/x/tools/cmd/goimports@latest

WORKDIR /usr/local/src/nca

# Grab and build the source before worrying about config files so when config
# changes we aren't having to rebuild everything
#
# TODO: When we have a public repo, just pull that instead of this pain
RUN mkdir -p /usr/local/nca
COPY ./Makefile /usr/local/src/nca/Makefile
COPY ./scripts /usr/local/src/nca/scripts
COPY ./src /usr/local/src/nca/src
COPY ./go.mod /usr/local/src/nca/go.mod
COPY ./go.sum /usr/local/src/nca/go.sum
RUN make
RUN cp -r ./bin /usr/local/nca/bin

# We copy other files very granularly in order to avoid copying in binaries,
# vendored sources, sensitive settings, etc.; we want to make sure this
# dockerfile stands on its own
COPY ./db/migrations /usr/local/nca/db/migrations
COPY ./static /usr/local/nca/static
COPY ./templates /usr/local/nca/templates
COPY ./settings-example /usr/local/nca/settings

# Utilities
COPY ./docker/wait_for_database /usr/local/bin/
COPY ./docker/entrypoint.sh /entrypoint.sh

# Get the cache directory prepared
RUN mkdir -p /var/local/news/nca/cache

WORKDIR /usr/local/nca
ENTRYPOINT ["/entrypoint.sh"]
