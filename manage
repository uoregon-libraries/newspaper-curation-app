#!/usr/bin/env bash
set -eu

PROJECT=$(docker compose config --format json | jq '.name' | sed 's|"||g')
VOLUMES=$(docker compose config --volumes | sed 's|"||g')

nuke() {
  echo "Deleting the stack"
  docker compose kill
  docker compose down -v
  rm ./test/fakemount/* -rf
  echo "Done (Deleting the stack)"
}

dcup() {
  echo "Starting up key docker services"
  docker compose up -d iiif sftpgo db oni-agent-staging oni-agent-prod oni-staging oni-prod
  echo "Done (Starting up key docker services)"
}

backup() {
  # This "create" usually won't matter, but it ensures all volumes have been
  # created so we don't get errors trying to back them up
  docker compose create

  dir=$(realpath $1)
  mkdir -p $dir

  echo "Taking down the stack gracefully"
  docker compose down
  echo "Done (Taking down the stack gracefully)"

  echo "Deleting old backups (if any)"
  fakemount="$dir/fakemount.tar"
  sudo rm -f $dir/*.tar
  echo "Done (Deleting old backups (if any))"

  echo "Writing fakemount backup"
  sudo tar -cpf $fakemount ./test/fakemount

  echo "Backing up docker volumes..."
  for vol in $VOLUMES; do
    name="${PROJECT}_${vol}"
    voldir="/var/lib/docker/volumes/$name"
    backup="$dir/volume-$vol.tar"
    echo "  - Processing volume $vol"
    echo "    ($voldir -> $backup)"
    sudo su -c "cd $voldir && tar -cpf $backup ."
  done

  echo "Done (Writing new backup files)"

  dcup
}

migrate() {
  docker compose run --rm workers wait_for_database
}

load_seed_data() {
  docker compose run --rm workers wait_for_database
  docker compose run --rm workers mysql -unca -pnca -Dnca -hdb < ./docker/mysql/nca-seed-data.sql
}

restore() {
  nuke

  dir="$1"
  echo "Restoring from $dir"
  fakemount="$dir/fakemount.tar"
  sudo tar -xspf $fakemount ./test/fakemount

  echo "Restoring docker volumes..."
  for vol in $VOLUMES; do
    name="${PROJECT}_${vol}"
    voldir="/var/lib/docker/volumes/$name"
    backup="$dir/volume-$vol.tar"
    echo "  - Processing volume $vol"
    echo "    ($backup -> $voldir)"
    sudo su -c "mkdir -p $voldir && cd $voldir && tar -mxspf $backup"
  done

  echo "Done (Restoring from $dir)"

  dcup

  sleep 2
  echo "Hacking SFTPGo 'home' volume permissions"
  sudo chown $(whoami):$(whoami) /var/lib/docker/volumes/${PROJECT}_sftpgo-home/_data
  echo "Done (Hacking SFTPGo 'home' volume permissions)"
}

build() {
  echo "Building NCA images"
  docker compose build
  echo "Done (Building NCA images)"
}

resetfakemount() {
  pushd .
  cd ./test
  ./makemine.sh
  rm fakemount/* -rf
  go run copy-sources.go .
  ./make-older.sh
  popd
}

reset() {
  echo "Resetting the stack"
  build
  docker compose down -v
  migrate
  load_seed_data
  resetfakemount
  echo "Done (Resetting the stack)"
}

# This ensures the first thing I do is type my password so I can walk away
# without unexpected sudo prompts holding up the process
sudo echo

dir="./backup/${2:-default}"

case ${1:-} in
reset)
  reset
  ;;

build)
  build
  ;;

nuke)
  nuke
  ;;

backup)
  echo 'Backing up to "'$dir'" in two seconds....'
  sleep 2
  backup $dir
  ;;

restore)
  sec=2
  dir=$(realpath $dir)
  if [[ ! -d $dir ]]; then
    dirname=${dir%/*}
    wildcard="${dir##*/}*"
    dir=$(find $dirname -mindepth 1 -maxdepth 1 -type d -name "$wildcard")
    sec=5
  fi
  echo 'Restoring from "'$dir'" in '"$sec seconds...."
  sleep $sec
  restore $dir
  ;;

migrate)
  migrate
  ;;

*)
  echo "Usage: ./manage <reset|build|nuke|backup|restore|migrate>"
esac
