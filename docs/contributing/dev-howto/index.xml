<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>How do I...? on Newspaper Curation App</title>
    <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/</link>
    <description>Recent content in How do I...? on Newspaper Curation App</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Add Job Types</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-job-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-job-types/</guid>
      <description>&lt;p&gt;When a new kind of job is required for backend processing, it has to be done&#xA;properly in order to ensure it is used, set up, and processed by NCA.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Make sure there aren&amp;rsquo;t already existing jobs that do what you want! There&#xA;are a lot of jobs in NCA already, and some are meant to be very generic, such&#xA;as &lt;code&gt;JobTypeRenameDir&lt;/code&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Read and make sure you understand &lt;em&gt;all structs&lt;/em&gt; in &lt;code&gt;src/jobs&lt;/code&gt; that&#xA;implement &lt;code&gt;Process&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Create a new &lt;code&gt;JobType&lt;/code&gt; in &lt;a href=&#34;https://github.com/uoregon-libraries/newspaper-curation-app/blob/main/src/models/job.go&#34;&gt;&lt;code&gt;src/models/job.go&lt;/code&gt;&lt;/a&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add the &lt;code&gt;JobType&lt;/code&gt; to the const list&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Make sure the string is 100% unique within that list!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Add the new &lt;code&gt;JobType&lt;/code&gt; to the &lt;code&gt;ValidJobTypes&lt;/code&gt; list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Create a new struct that implements the &lt;code&gt;Process&lt;/code&gt; method.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use an existing Go file if it makes sense (e.g., another metadata or&#xA;filesystem job) or create a new one in &lt;code&gt;src/jobs/&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Make sure you document the type! What is its purpose?&lt;/li&gt;&#xA;&lt;li&gt;Need an example? The metadata jobs are very simple and can be found in&#xA;&lt;a href=&#34;https://github.com/uoregon-libraries/newspaper-curation-app/blob/main/src/jobs/metadata_jobs.go&#34;&gt;&lt;code&gt;src/jobs/metadata_jobs.go&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Wire up the &lt;code&gt;JobType&lt;/code&gt; to the concrete &lt;code&gt;Process&lt;/code&gt; implementor&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This is done in &lt;a href=&#34;https://github.com/uoregon-libraries/newspaper-curation-app/blob/main/src/jobs/jobs.go&#34;&gt;&lt;code&gt;src/jobs/jobs.go&lt;/code&gt;&lt;/a&gt;, in the &lt;code&gt;DBJobToProcessor&lt;/code&gt; function&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Queue a job of the new type.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;See &lt;a href=&#34;https://github.com/uoregon-libraries/newspaper-curation-app/blob/main/src/jobs/queue.go&#34;&gt;&lt;code&gt;src/jobs/queue.go&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;You might need to create a new arg value in &lt;code&gt;src/jobs/queue.go&lt;/code&gt;, like&#xA;&lt;code&gt;JobArgSource&lt;/code&gt;, &lt;code&gt;JobArgWorkflowStep&lt;/code&gt;, etc.&lt;/li&gt;&#xA;&lt;li&gt;You will certainly need to create the job and push it into a queue. This&#xA;happens in a &lt;code&gt;Queue...&lt;/code&gt; function (e.g., &lt;code&gt;QueueBatchForDeletion&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Make something run jobs of the new type.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For almost any new job, you&amp;rsquo;ll just add the type to an existing runner&#xA;function in &lt;a href=&#34;https://github.com/uoregon-libraries/newspaper-curation-app/blob/main/src/cmd/run-jobs/main.go&#34;&gt;&lt;code&gt;src/cmd/run-jobs/main.go&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;runAllQueues&lt;/code&gt;). This ensures&#xA;a simple job runner invocation (with the &lt;code&gt;watchall&lt;/code&gt; argument) will run your&#xA;new job type.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Add Configuration Settings</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-config-items/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-config-items/</guid>
      <description>&lt;p&gt;Occasionally we need a new setting to be created so that users have a bit more&#xA;control over the inner workings of NCA. This details the process of adding&#xA;settings:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Open up &lt;a href=&#34;https://github.com/uoregon-libraries/newspaper-curation-app/blob/main/src/config/config.go&#34;&gt;&lt;code&gt;src/config/config.go&lt;/code&gt;&lt;/a&gt; and add a value to the Config struct.&lt;/li&gt;&#xA;&lt;li&gt;Choose the data type. In most cases a primitive is fine: string, int,&#xA;float64, etc.&lt;/li&gt;&#xA;&lt;li&gt;Decide if the value should be pulled directly from the &lt;code&gt;settings&lt;/code&gt; file or if&#xA;you need to massage data manually. The former is usually the best option, but&#xA;not always possible.&lt;/li&gt;&#xA;&lt;li&gt;If the value is pulled directly from &lt;code&gt;settings&lt;/code&gt;, set up the struct tags:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;At a minimum you must define which &lt;code&gt;settings&lt;/code&gt; value will populate the Go&#xA;config structure; e.g., the &lt;code&gt;config.Ghostscript&lt;/code&gt; value specifies&#xA;&lt;code&gt;setting:&amp;quot;GHOSTSCRIPT&amp;quot;&lt;/code&gt; in the struct tag, telling us the &lt;code&gt;settings&lt;/code&gt; file&amp;rsquo;s&#xA;&amp;ldquo;GHOSTSCRIPT&amp;rdquo; value is to be used.&lt;/li&gt;&#xA;&lt;li&gt;If you want validation, use a &amp;ldquo;type&amp;rdquo; struct tag, e.g., the &amp;ldquo;Webroot&amp;rdquo;&#xA;setting uses &lt;code&gt;type:&amp;quot;url&amp;quot;&lt;/code&gt; to specify that the value &lt;em&gt;must&lt;/em&gt; be a valid URL.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;If the value is not directly pulled from &lt;code&gt;settings&lt;/code&gt;, modify &lt;code&gt;Parse()&lt;/code&gt; to read&#xA;the raw setting and set the config field accordingly.&lt;/li&gt;&#xA;&lt;li&gt;Open &lt;code&gt;settings-example&lt;/code&gt; and add the setting with some documentation&#xA;(bash-style comments) explaning what it does and how it should be used. When&#xA;you can, make sure the default &amp;ldquo;just works&amp;rdquo; with a standard docker setup.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Notes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Add Privileges / Roles</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-privileges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-privileges/</guid>
      <description>&lt;p&gt;New privileges require a lot of different changes in order to create them, tie&#xA;them to a role, and then have NCA use them.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Edit &lt;code&gt;src/privilege/role.go&lt;/code&gt; if the new privilege(s) are going to be tied to&#xA;an entirely new role.&lt;/li&gt;&#xA;&lt;li&gt;Edit &lt;code&gt;src/privilege/privilege.go&lt;/code&gt; and add the item in the big list of vars.&#xA;You have to define what role(s) can have said privilege.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Site Managers have all privileges of non-sysop roles, and don&amp;rsquo;t need to be&#xA;mentioned unless they&amp;rsquo;re the only user with a particular privilege.&lt;/li&gt;&#xA;&lt;li&gt;SysOps always have all privileges and aren&amp;rsquo;t specified explicitly, but the&#xA;privilege does require a definition, even if it&amp;rsquo;s just an empty role list.&lt;/li&gt;&#xA;&lt;li&gt;Examples:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;PrivA = newPrivilege(RoleCurator)&lt;/code&gt;: &lt;code&gt;PrivA&lt;/code&gt; is explicitly given to&#xA;curators and implicitly to site managers and sysops. No other users will&#xA;have PrivA access.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;PrivB = newPrivilege(RoleSiteManager)&lt;/code&gt;: &lt;code&gt;PrivB&lt;/code&gt; is explicitly given to&#xA;site managers, and implicitly to sysops.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;PrivC = newPrivilege()&lt;/code&gt;: &lt;code&gt;PrivC&lt;/code&gt; is implicitly given to sysops. Nobody&#xA;else, not even site managers, will have this privilege.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;If the privilege needs to be used in handlers, use a middleware function.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The &lt;code&gt;audithandler&lt;/code&gt; has a simple example of this, where a &lt;code&gt;canView&lt;/code&gt; function&#xA;wraps access to all routes.&lt;/li&gt;&#xA;&lt;li&gt;Fairly complex authorization middleware functions can be seen in the&#xA;&lt;code&gt;workflowhandler&lt;/code&gt; code, where the authorization functions verify not just&#xA;privileges, but also issue state, issue ownership, etc.&lt;/li&gt;&#xA;&lt;li&gt;In almost all situations where a new route or handler is created, an access&#xA;check of &lt;em&gt;some&lt;/em&gt; kind should be created.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;If the privilege needs a check in the HTML templates:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First, you have to expose the privilege by name in&#xA;&lt;code&gt;src/cmd/server/internal/responder/templates.go&lt;/code&gt;. There&amp;rsquo;s a long list of&#xA;privileges there, exposed as functions, to help ensure compile-time&#xA;correctness of privilege checks.&lt;/li&gt;&#xA;&lt;li&gt;Second, you have to use the privilege. &lt;code&gt;templates/layout.go.html&lt;/code&gt; has&#xA;examples of using &lt;code&gt;.User.PermittedTo&lt;/code&gt; for deciding which navigation items&#xA;to expose.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Occasionally you may think it necessary to add a manual permissions check&#xA;somewhere in a handler. Usually this is a bad idea, but if you&amp;rsquo;re certain&#xA;such a check is necessary, you can find a few examples of this in various&#xA;handlers. If you don&amp;rsquo;t want to spend the time to figure out where they are&#xA;and how to emulate them, you probably don&amp;rsquo;t need them that badly :P&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
