<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Contributing on Newspaper Curation App</title>
    <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/</link>
    <description>Recent content in Contributing on Newspaper Curation App</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://uoregon-libraries.github.io/newspaper-curation-app/contributing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Developer&#39;s Guide</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-guide/</guid>
      <description>&lt;p&gt;It is assumed developers will use Docker for dependencies outside this&#xA;repository: ONI (staging and production, and services for both), database, RAIS&#xA;(IIIF server), the ONI Agents (staging and production), and SFTPGo. The rest of&#xA;the tools are most easily installed locally, and the NCA binaries themselves&#xA;are in fact easier by far to install locally versus building them in an image&#xA;when code changes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;requirements--setup&#34;&gt;Requirements / Setup&lt;/h2&gt;&#xA;&lt;h3 id=&#34;local-dependencies&#34;&gt;Local dependencies&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A supported version of &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go&lt;/a&gt; (e.g., if 1.16 is the&#xA;latest, you want 1.15 or 1.16)&lt;/li&gt;&#xA;&lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;Docker CE&lt;/a&gt;, which will give you&#xA;the &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker compose&lt;/code&gt; commands.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If you choose not to compile on your host machine, you will have a slightly&#xA;simpler initial install, but there are a few considerations as you edit and&#xA;test the code. See &lt;a href=&#34;../contributing/not-compiling-locally&#34;&gt;Not Compiling Locally&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Not Compiling Locally</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/not-compiling-locally/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/not-compiling-locally/</guid>
      <description>&lt;p&gt;If you want to compile NCA inside a container, you are for the most part on&#xA;your own. It&amp;rsquo;s doable and pretty easy, but it&amp;rsquo;s not part of the steps we&amp;rsquo;re&#xA;going to outline, because it adds some annoyances.&lt;/p&gt;&#xA;&lt;p&gt;Why is it best to compile on your local machine instead of inside a container?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go is not Ruby / Python / PHP / node. You aren&amp;rsquo;t installing a systemwide&#xA;runtime or futzing with things like rbenv, nvm, virtualenv, composer, &amp;hellip;.&lt;/li&gt;&#xA;&lt;li&gt;Go doesn&amp;rsquo;t even really require an install per se; you can choose to download&#xA;the binary distribution, set up some environment variables, and use it. No&#xA;sudo, no /usr/bin polluting, no complex compiling from sources.&lt;/li&gt;&#xA;&lt;li&gt;Same with go&amp;rsquo;s dependencies - &lt;code&gt;go install ...&lt;/code&gt; will install files in a space&#xA;that&amp;rsquo;s local to your user path. All NCA&amp;rsquo;s code dependencies are similarly&#xA;local. Everything &amp;ldquo;just works&amp;rdquo;. The only reason to use Docker for&#xA;development is the various external dependencies like RAIS, MySQL, etc.&lt;/li&gt;&#xA;&lt;li&gt;Vim (and other editors / IDEs) usually require Go tools to be installed&#xA;locally for code analysis, autocomplete, etc.&lt;/li&gt;&#xA;&lt;li&gt;This repository doesn&amp;rsquo;t have a deploy system for use inside containers; if&#xA;you want to compile inside the containers, it can be a little tricky:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mount your code into &lt;code&gt;/usr/local/src/nca&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Within the container, go to the &lt;code&gt;/usr/local/src/nca&lt;/code&gt; directory for all commands like make, gofmt, etc.&lt;/li&gt;&#xA;&lt;li&gt;Copy binary files into &lt;code&gt;/usr/local/nca&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For development, it&amp;rsquo;s just a lot easier to install Go locally, compile locally,&#xA;and run the binaries locally. The only &amp;ldquo;tricky&amp;rdquo; part is getting poppler,&#xA;graphics magick, and ghostscript installed. Which in most cases amounts to&#xA;three &amp;ldquo;apt install&amp;rdquo; (or equivalent) commands.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contributing to Documentation</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/documentation/</guid>
      <description>&lt;p&gt;The documentation for this site is produced using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and a custom theme&#xA;based on the look and feel of &lt;a href=&#34;https://themes.gohugo.io/hugo-theme-techdoc/&#34;&gt;TechDoc&lt;/a&gt;, a contributed Hugo theme.&lt;/p&gt;&#xA;&lt;p&gt;We want our documentation to help you use NCA (okay, again, if I&amp;rsquo;m being&#xA;honest, this is really just for UO to remember how to use our app), and as such&#xA;the documentation itself needs to be easy to edit and keep up-to-date.&lt;/p&gt;&#xA;&lt;h2 id=&#34;starting-out&#34;&gt;Starting out&lt;/h2&gt;&#xA;&lt;p&gt;Get Hugo installed. It&amp;rsquo;s a trivial standalone application that can be&#xA;installed with minimal fuss: &lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;installing Hugo&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/testing/</guid>
      <description>&lt;h2 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h2&gt;&#xA;&lt;p&gt;Running unit tests is easy:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This compiles all of the code and tests any &lt;code&gt;*_test.go&lt;/code&gt; files. Test coverage is&#xA;spotty at best right now, but the compile-time checks, and static analysis run&#xA;by &lt;code&gt;make&lt;/code&gt;, catch most of the kinds of problems you&amp;rsquo;d test for in&#xA;PHP/Ruby/Python/etc (variable typos, misuse of a function, etc.)&lt;/p&gt;&#xA;&lt;p&gt;Contributors: feel free to add more unit tests to improve overall coverage!&lt;/p&gt;&#xA;&lt;h2 id=&#34;manual-testing&#34;&gt;Manual Testing&lt;/h2&gt;&#xA;&lt;p&gt;Manually testing NCA can be time-consuming, as you have to find, copy, and then&#xA;load issues into NCA, enter metadata, etc. If you repeat this often enough, you&#xA;may find the project&amp;rsquo;s &amp;ldquo;test&amp;rdquo; directory helpful. It contains documentation and&#xA;scripts which are meant to make real-world-like testing a lot easier.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
