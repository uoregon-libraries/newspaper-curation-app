<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Newspaper Curation App</title>
    <link>https://uoregon-libraries.github.io/newspaper-curation-app/</link>
    <description>Recent content in Home on Newspaper Curation App</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://uoregon-libraries.github.io/newspaper-curation-app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Services and Apps</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/setup/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/setup/services/</guid>
      <description>You should at least understand everything in this document at a high level before moving on to the setup/installation documents, as the NCA suite is a set of tools, not a single application that does it all.
Overview NCA has two key services which you&amp;rsquo;ll have to have running in the background at all times, several binaries you&amp;rsquo;ll need to use occasionally for regular tasks, and of course the various external services (such as a IIIF server, SFTP server, MySQL / MariaDB, Apache / nginx, Open ONI and the ONI Agent, etc.</description>
    </item>
    
    <item>
      <title>Add Job Types</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-job-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-job-types/</guid>
      <description>When a new kind of job is required for backend processing, it has to be done properly in order to ensure it is used, set up, and processed by NCA.
Make sure there aren&amp;rsquo;t already existing jobs that do what you want! There are a lot of jobs in NCA already, and some are meant to be very generic, such as JobTypeRenameDir. Read and make sure you understand all structs in src/jobs that implement Process Create a new JobType in src/models/job.</description>
    </item>
    
    <item>
      <title>Developer&#39;s Guide</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-guide/</guid>
      <description>It is assumed developers will use Docker for dependencies outside this repository: ONI (staging and production, and services for both), database, RAIS (IIIF server), the ONI Agents (staging and production), and SFTPGo. The rest of the tools are most easily installed locally, and the NCA binaries themselves are in fact easier by far to install locally versus building them in an image when code changes.
Requirements / Setup Local dependencies A supported version of Go (e.</description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/specs/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/specs/glossary/</guid>
      <description>NDNP / Newspaper Catalogers These are terms I&amp;rsquo;m trying to use properly, but which I sometimes still mess up. Don&amp;rsquo;t let that happen to you!
Title: A distinct newspaper title, such as The Daily Prophet. All titles will have a unique LCCN. LCCN: Library of Congress Control Number: https://en.wikipedia.org/wiki/Library_of_Congress_Control_Number. In terms of NCA (and ONI and chronam), this uniquely identifies a newspaper title. Issue: A single published issue of a newspaper title, such as the April 20th edition of The Daily Prophet.</description>
    </item>
    
    <item>
      <title>Server Setup</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/setup/server-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/setup/server-setup/</guid>
      <description>Human Requirements Unfortunately, this process is still technical enough that you will need a devops person to at least get the system set up for processing. You&amp;rsquo;ll also need people who can reorder PDF pages (if necessary) as well as people who can enter and review newspaper issue metadata.
Somebody will want to monitor the output from the various automated processes, such as QCing generated batches on a staging server prior to loading in production, as there is still a great deal of room for human error.</description>
    </item>
    
    <item>
      <title>Technical Details</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/technical/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/technical/</guid>
      <description>This document attempts to explain the entire workflow from upload to batch generation in a way that developers can understand what&amp;rsquo;s needed and how to at least begin investigating if something goes wrong.
Jobs and the Job Queue All background work in NCA is made up of relatively small parts tied together in a single &amp;ldquo;pipeline&amp;rdquo;. A pipeline represents a distinct operation that is made up of smaller units, the jobs themselves.</description>
    </item>
    
    <item>
      <title>Add Configuration Settings</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-config-items/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-config-items/</guid>
      <description>Occasionally we need a new setting to be created so that users have a bit more control over the inner workings of NCA. This details the process of adding settings:
Open up src/config/config.go and add a value to the Config struct. Choose the data type. In most cases a primitive is fine: string, int, float64, etc. Decide if the value should be pulled directly from the settings file or if you need to massage data manually.</description>
    </item>
    
    <item>
      <title>Adding Titles</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/adding-titles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/adding-titles/</guid>
      <description>Adding a title to NCA is very simple in cases where the title already exists somewhere external (e.g., Library of Congress), but can take a lot more work for titles not indexed elsewhere. Here&amp;rsquo;s our process:
Provision a real record, including things like an LCCN This is a must for us, otherwise our Historic Oregon Newspapers site will misrepresent information that could be extremely confusing to end-users looking for more details.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/setup/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/setup/installation/</guid>
      <description>Development If you&amp;rsquo;re developing on NCA, installation will differ from standing up a production server. Please see our Development Guide.
Preliminary Setup Manual installation has several prerequisites:
Poppler Utils for PDF processing OpenJPEG 2 + command-line tools for JP2 generation GhostScript GraphicsMagick MariaDB A IIIF server capable of handling tiled JP2 files without a ton of overhead (e.g., RAIS) Apache/nginx for authentication as well as proxying to NCA and the IIIF server Two running Open ONI applications: staging and production.</description>
    </item>
    
    <item>
      <title>Not Compiling Locally</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/not-compiling-locally/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/not-compiling-locally/</guid>
      <description>If you want to compile NCA inside a container, you are for the most part on your own. It&amp;rsquo;s doable and pretty easy, but it&amp;rsquo;s not part of the steps we&amp;rsquo;re going to outline, because it adds some annoyances.
Why is it best to compile on your local machine instead of inside a container?
Go is not Ruby / Python / PHP / node. You aren&amp;rsquo;t installing a systemwide runtime or futzing with things like rbenv, nvm, virtualenv, composer, &amp;hellip;.</description>
    </item>
    
    <item>
      <title>Uploads: Folder and File Specs</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/specs/upload-specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/specs/upload-specs/</guid>
      <description>Uploads: Folder and File Specs Publishers (or in-house scanners) who upload issues must adhere to very strict structures for issue organization.
Born-Digital (PDFs uploaded via SFTP) The folder structure tells us the newspaper title and issue date. e.g., /mnt/news/sftp/sftpuser/2018-01-02 would mean the January 2nd, 2018 edition of title whose SFTP login is &amp;ldquo;sftpuser&amp;rdquo;.
The issue should contain PDFs and nothing else. Publishers should never upload tertiary files. Ideally, publishers should upload one PDF for the entire issue, with pages in the order they wish to see on the ONI site, as that reduces (or eliminates) the need to have anybody reviewing these issues&amp;rsquo; pages.</description>
    </item>
    
    <item>
      <title>Add Privileges / Roles</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-privileges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/dev-howto/add-privileges/</guid>
      <description>New privileges require a lot of different changes in order to create them, tie them to a role, and then have NCA use them.
Edit src/privilege/role.go if the new privilege(s) are going to be tied to an entirely new role. Edit src/privilege/privilege.go and add the item in the big list of vars. You have to define what role(s) can have said privilege. Super-admins always have all privileges and aren&amp;rsquo;t specified explicitly, but the privilege does require a definition, even if it&amp;rsquo;s just an empty role list.</description>
    </item>
    
    <item>
      <title>Contributing to Documentation</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/documentation/</guid>
      <description>The documentation for this site is produced using Hugo and a custom theme based on the look and feel of TechDoc, a contributed Hugo theme.
We want our documentation to help you use NCA (okay, again, if I&amp;rsquo;m being honest, this is really just for UO to remember how to use our app), and as such the documentation itself needs to be easy to edit and keep up-to-date.
Starting out Get Hugo installed.</description>
    </item>
    
    <item>
      <title>Handling Page Review Problems</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/handling-page-review-problems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/handling-page-review-problems/</guid>
      <description>The &amp;ldquo;page review&amp;rdquo; location is one of the most dangerous in the application due to the requirement that people manually edit and rename files. There are potentially a lot of difficult problems to manage here.
Manual Deletion If issues got to the page-review step when they shouldn&amp;rsquo;t have, the only option is to remove them. Make sure you do this right. There is a tool for this process, and manually deleting issues will cause you pain (see below).</description>
    </item>
    
    <item>
      <title>Users</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/setup/user-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/setup/user-setup/</guid>
      <description>Once the applications are installed and configured, you&amp;rsquo;ll need an admin user. Start the NCA server in debug mode:
./bin/server -c ./settings --debug This lets you fake an admin login via http://your.site/users?debuguser=admin. You can then set up other users as necessary. Once you have Apache set up to do the authentication, you should never run in debug mode on production servers.
For development use, scripts/localdev.sh already runs the server in debug mode.</description>
    </item>
    
    <item>
      <title>Fixing &#34;Stuck&#34; Issues</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/fixing-stuck-issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/fixing-stuck-issues/</guid>
      <description>Sometimes a publisher will upload a broken PDF that NCA cannot process. For smaller organizations, these kinds of problems are easy to prevent just via careful review. But for larger orgs, it&amp;rsquo;s often infeasible to do this, e.g., if you have enough publishers that you get hundreds of pages uploaded each week.
When an issue gets stuck, NCA currently has no way to indicate this. This is one area where a developer used to have to clean up the filesystem and database manually.</description>
    </item>
    
    <item>
      <title>Fixing Flagged Workflow Issues</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/fixing-flagged-workflow-issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/fixing-flagged-workflow-issues/</guid>
      <description>This refers to issues which were already queued from their uploaded location, had derivatives generated, and were ready for metadata entry.
The metadata entry person flags errors to say essentially, &amp;ldquo;NCA&amp;rsquo;s UI cannot fix the problems on this issue&amp;rdquo;. We have seen a variety of problems like this:
The PDF or JP2 image derivatives are corrupt in some way, even though the tools which generated them seemed to run without errors The pages are out of order - somebody reordered pages incorrectly, and the issue now has to be manually pulled, fixed, and re-inserted into the workflow The issue is incorrect in some other way, and wasn&amp;rsquo;t caught when queueing from the uploads area (e.</description>
    </item>
    
    <item>
      <title>Onboarding A Publisher</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/setup/creating-publishers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/setup/creating-publishers/</guid>
      <description>Creating a publisher in NCA, at least for UO, requires several manual processes take place:
Upload a MARC record for the title, and then edit them to provide SFTP credentials. Set up a user for sftp access if you aren&amp;rsquo;t using the SFTPGo integration (but you really should, it&amp;rsquo;s way easier) </description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/contributing/testing/</guid>
      <description>Unit Testing Running unit tests is easy:
make test This compiles all of the code and tests any *_test.go files. Test coverage is spotty at best right now, but the compile-time checks, and static analysis run by make, catch most of the kinds of problems you&amp;rsquo;d test for in PHP/Ruby/Python/etc (variable typos, misuse of a function, etc.)
Contributors: feel free to add more unit tests to improve overall coverage!
Manual Testing Manually testing NCA can be time-consuming, as you have to find, copy, and then load issues into NCA, enter metadata, etc.</description>
    </item>
    
    <item>
      <title>SFTPGo Integration</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/setup/sftpgo-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/setup/sftpgo-integration/</guid>
      <description>SFTPGo is an sftp server that exposes APIs and a web interface for administration tasks. We&amp;rsquo;ve chosen to integrate NCA with SFTPGo in order to simplify the process of creating titles for a publisher that&amp;rsquo;s uploading newspaper PDFs.
If you choose not to use this integration, publisher uploads will have to be managed entirely by you (as was the case prior to this integration), and NCA will not track SFTP data (which is a change from NCA 3.</description>
    </item>
    
    <item>
      <title>Replacing Live Issues</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/fixing-live-batches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/fixing-live-batches/</guid>
      <description>Helper Script We&amp;rsquo;ve put together a helper script which can automate a lot of the preparation steps when a single LCCN needs a lot of issues pulled. It is hacky and hard-coded at the moment, but it doesn&amp;rsquo;t make any changes to anything, so it&amp;rsquo;s safe to try out, and even modify to suit other use-cases.
To run: go run scripts/help-remove-issues.go &amp;lt;lccn&amp;gt; &amp;lt;issue dates filename&amp;gt; &amp;lt;path to NCA dir&amp;gt; &amp;lt;path to live batches&amp;gt;.</description>
    </item>
    
    <item>
      <title>&#34;Un-push&#34; Batch From Production</title>
      <link>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/undo-batch-golive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://uoregon-libraries.github.io/newspaper-curation-app/workflow/undo-batch-golive/</guid>
      <description>Sometimes a batch is messed up enough that it needs to be completely removed, rebuilt, and reingested, but it&amp;rsquo;s already in production. In the (rare) cases this happens and we haven&amp;rsquo;t already archived all the original files, we can un-push the batch and requeue the necessary issues.
This procedure helps &amp;ldquo;un-push&amp;rdquo; batches, but only when all of the following are true:
The batch was created by NCA, not a vendor. There&amp;rsquo;s currently no procedure for reading a non-NCA batch and putting its issues in the database.</description>
    </item>
    
  </channel>
</rss>
